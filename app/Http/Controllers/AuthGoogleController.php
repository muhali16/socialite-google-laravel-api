<?php

namespace App\Http\Controllers;

use App\Models\User;
use Google\Auth\OAuth2;
use Google\Service\Drive;
use Google\Service\Oauth2 as ServiceOauth2;
use Google_Client;
use http\Env\Response;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Laravel\Socialite\Facades\Socialite;

class AuthGoogleController extends Controller
{
    /**
     * The function `googleClient` creates and configures a Google_Client object for interacting with
     * Google APIs in a PHP application.
     *
     * @return Google_Client
     */
    private function googleClient(): Google_Client {
        // load google config
        $googleConfig = base_path() . "/config.json";

        // create client
        $client = new Google_Client();
        $client->setApplicationName(env("APP_NAME", "Sociallite Laravel Project"));
        $client->setAuthConfig($googleConfig);
        $client->setAccessType("offline");
        $client->setApprovalPrompt('force');
        // determine what google endpoint we can access
        $client->setScopes([
            ServiceOauth2::USERINFO_PROFILE,
            ServiceOauth2::USERINFO_EMAIL,
            ServiceOauth2::OPENID,
            // Drive::DRIVE_METADATA_READONLY, // allows reading of google drive metadata
        ]);
        $client->setIncludeGrantedScopes(true);

        return $client;
    }

    /**
     * The function `googleAuthUrl` returns a JSON response containing the Google authentication URL
     * generated by the `googleClient` method.
     *
     * @return RedirectResponse
     */
//    public function googleAuthUrl(): RedirectResponse {
//        $client = $this->googleClient();
//        return Redirect::to($client->createAuthUrl());
//    }

    // public function googleAuthRedirect() : Redirect {
    //     $redirect = Socialite::driver('google')->stateless
    // }

    public function googleAuth()
    {
        return Socialite::driver('google')->stateless()->redirect();
    }

    public function googleAuthCallback() : RedirectResponse {
        $googleCallbackUser = Socialite::driver('google')->user();

        $user = User::where("social_id", $googleCallbackUser->getId())->first();
        $socialIdCrypt = bcrypt($googleCallbackUser->getId());

        if ($user) {
            Auth::login($user);
            return \redirect(env('FRONTEND_URI') . '/t=' . $socialIdCrypt);
        }

        User::create([
            'name' => $googleCallbackUser->getName(),
            'email' => $googleCallbackUser->getEmail(),
            'password' => null,
            'social_id' => $googleCallbackUser->getId(),
            'social_type' => 'google',
            'google_access_token' => 'ijn92398nfj2n3nrf293',
        ]);

        return \redirect(env('FRONTEND_URI') . '/t=' . $socialIdCrypt);
    }

//    public function postGoogleAuth(Request $request) : JsonResponse {
//        $authCode = urlencode($request->input('auth_code'));
//        $client = $this->googleClient();
//        $fetchToken = $client->fetchAccessTokenWithAuthCode($authCode);
//        dd($fetchToken);
//        $client->setAccessToken(json_encode($fetchToken));
//
//        $service = new ServiceOauth2($client);
//        $userInfoFromGoogle = $service->userinfo->get();
//        $user = User::where("social_type", 'google')
//                    ->where("social_id", $userInfoFromGoogle->id)
//                    ->first();
//        if(!$user) {
//            $user = User::create([
//                'name' => $userInfoFromGoogle->name,
//                'email' => $userInfoFromGoogle->email,
//                'social_id' => $userInfoFromGoogle->id,
//                'social_type' => "google",
//                'google_access_token_json' => json_encode($fetchToken),
//            ]);
//        } else {
//            $user->update(["google_access_token_json" => json_encode($fetchToken)]);
//        }
//
//        $token = $user->createToken("google_token")->accessToken;
//        return response()->json(["token" => $token], 201);
//    }
}
